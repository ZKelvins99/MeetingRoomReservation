<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.company.meeting.mapper.BookingMapper">

    <resultMap id="BookingResultMap" type="com.company.meeting.entity.MeetingBooking">
        <id column="id" property="id"/>
        <result column="room_id" property="roomId"/>
        <result column="user_id" property="userId"/>
        <result column="meeting_title" property="meetingTitle"/>
        <result column="meeting_desc" property="meetingDesc"/>
        <result column="start_time" property="startTime"/>
        <result column="end_time" property="endTime"/>
        <result column="attendee_count" property="attendeeCount"/>
        <result column="attendees" property="attendees"/>
        <result column="booking_status" property="bookingStatus"/>
        <result column="remind_time" property="remindTime"/>
        <result column="is_reminded" property="isReminded"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>
        <result column="room_name" property="roomName"/>
        <result column="user_name" property="userName"/>
        <result column="real_name" property="realName"/>
    </resultMap>

    <select id="findById" resultMap="BookingResultMap">
        SELECT b.*, r.room_name, u.username as user_name, u.real_name
        FROM t_meeting_booking b
        LEFT JOIN t_meeting_room r ON b.room_id = r.id
        LEFT JOIN t_user u ON b.user_id = u.id
        WHERE b.id = #{id}
    </select>

    <select id="findByUserId" resultMap="BookingResultMap">
        SELECT b.*, r.room_name, u.username as user_name, u.real_name
        FROM t_meeting_booking b
        LEFT JOIN t_meeting_room r ON b.room_id = r.id
        LEFT JOIN t_user u ON b.user_id = u.id
        WHERE b.user_id = #{userId}
        ORDER BY b.create_time DESC
        OFFSET #{offset} ROWS FETCH NEXT #{size} ROWS ONLY
    </select>

    <select id="countByUserId" resultType="int">
        SELECT COUNT(*) FROM t_meeting_booking WHERE user_id = #{userId}
    </select>

    <select id="findAll" resultMap="BookingResultMap">
        SELECT b.*, r.room_name, u.username as user_name, u.real_name
        FROM t_meeting_booking b
        LEFT JOIN t_meeting_room r ON b.room_id = r.id
        LEFT JOIN t_user u ON b.user_id = u.id
        <where>
            <if test="roomName != null and roomName != ''">
                AND r.room_name LIKE '%' || #{roomName} || '%'
            </if>
            <if test="status != null and status != ''">
                AND b.booking_status = #{status}
            </if>
        </where>
        ORDER BY b.create_time DESC
        OFFSET #{offset} ROWS FETCH NEXT #{size} ROWS ONLY
    </select>

    <select id="countAll" resultType="int">
        SELECT COUNT(*)
        FROM t_meeting_booking b
        LEFT JOIN t_meeting_room r ON b.room_id = r.id
        <where>
            <if test="roomName != null and roomName != ''">
                AND r.room_name LIKE '%' || #{roomName} || '%'
            </if>
            <if test="status != null and status != ''">
                AND b.booking_status = #{status}
            </if>
        </where>
    </select>

    <insert id="insert" parameterType="com.company.meeting.entity.MeetingBooking">
        INSERT INTO t_meeting_booking (
            room_id, user_id, meeting_title, meeting_desc, start_time, end_time,
            attendee_count, attendees, booking_status, remind_time, is_reminded
        ) VALUES (
                     #{roomId, jdbcType=INTEGER},
                     #{userId, jdbcType=INTEGER},
                     #{meetingTitle, jdbcType=VARCHAR},
                     #{meetingDesc, jdbcType=VARCHAR},
                     #{startTime, jdbcType=TIMESTAMP},
                     #{endTime, jdbcType=TIMESTAMP},
                     #{attendeeCount, jdbcType=INTEGER},
                     #{attendees, jdbcType=VARCHAR},
                     #{bookingStatus, jdbcType=VARCHAR},
                     #{remindTime, jdbcType=INTEGER},
                     #{isReminded, jdbcType=BIT}
                 )
    </insert>

    <update id="update" parameterType="com.company.meeting.entity.MeetingBooking">
        UPDATE t_meeting_booking 
        SET booking_status = #{bookingStatus}, update_time = SYSDATE
        WHERE id = #{id}
    </update>

    <delete id="deleteById">
        DELETE FROM t_meeting_booking WHERE id = #{id}
    </delete>

    <select id="checkTimeConflict" resultType="int">
        SELECT COUNT(*)
        FROM t_meeting_booking
        WHERE room_id = #{roomId}
        AND booking_status = 'BOOKED'
        <if test="excludeId != null">
            AND id != #{excludeId}
        </if>
        AND (
            (start_time &lt;= #{startTime} AND end_time &gt; #{startTime})
            OR (start_time &lt; #{endTime} AND end_time &gt;= #{endTime})
            OR (start_time &gt;= #{startTime} AND end_time &lt;= #{endTime})
        )
    </select>

    <select id="findPendingReminders" resultMap="BookingResultMap">
        SELECT b.*, r.room_name, u.username as user_name, u.real_name
        FROM t_meeting_booking b
        LEFT JOIN t_meeting_room r ON b.room_id = r.id
        LEFT JOIN t_user u ON b.user_id = u.id
        WHERE b.booking_status = 'BOOKED'
        AND b.is_reminded = 0
        AND b.start_time - NUMTODSINTERVAL(b.remind_time, 'MINUTE') &lt;= SYSDATE
    </select>

    <update id="updateReminderStatus">
        UPDATE t_meeting_booking SET is_reminded = 1, update_time = SYSDATE WHERE id = #{id}
    </update>

</mapper>